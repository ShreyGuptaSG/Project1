{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# BUSA8001 - Programming Task 3  \n",
    "\n",
    "**Assignment Points**: 100  \n",
    "**Assignment Weight**: 10%  \n",
    "**Submission**: Submit your file using the link below\n",
    "\n",
    "\n",
    "Provide your answers in this notebook and save it as `BUSA8001_programming_task3_MQ_ID.ipynb` where MQ_ID is your Macquarie University student ID number (e.g. if MQ_ID == 12345678 then you need to submit BUSA8001_programming_task3_12345678.ipynb). \n",
    "\n",
    "- Do NOT print your variables to screen unless explicitly asked to do so\n",
    "- Marks will be deducted for not following instructions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "**Problem 1**  - Total Marks: 7.5\n",
    "\n",
    "**Q1**. Read the credit card dataset from Programming Task 1 into a DataFrame named `df` and  \n",
    "- Rename the columns 'PAY_0' and 'default payment next month' as in Programming Task 2 \n",
    "- Delete 'ID' column    \n",
    "- Print columns of `df`  \n",
    "- Print shape of `df`    \n",
    "(2.5 marks) \n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['LIMIT_BAL', 'SEX', 'EDUCATION', 'MARRIAGE', 'AGE', 'PAY_1', 'PAY_2',\n",
      "       'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6', 'BILL_AMT1', 'BILL_AMT2',\n",
      "       'BILL_AMT3', 'BILL_AMT4', 'BILL_AMT5', 'BILL_AMT6', 'PAY_AMT1',\n",
      "       'PAY_AMT2', 'PAY_AMT3', 'PAY_AMT4', 'PAY_AMT5', 'PAY_AMT6',\n",
      "       'payment_default'],\n",
      "      dtype='object')\n",
      "(30000, 24)\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "df = pd.read_excel('https://archive.ics.uci.edu/ml/machine-learning-databases/00350/default%20of%20credit%20card%20clients.xls', skiprows=[0])\n",
    "df = df.rename(columns={'PAY_0': 'PAY_1', 'default payment next month': 'payment_default'})\n",
    "del df['ID']\n",
    "print(df.columns)\n",
    "print(df.shape)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Q2**. Feature Engineering - Create additional features and add them to `df` by squaring the following variables  \n",
    "- LIMIT_BAL  \n",
    "- All BILL_AMT variables  \n",
    "- All PAY_AMT variables  \n",
    "\n",
    "Name the new variables by appending \"_2\" to the existing variables that you transformed, e.g. LIMIT_BAL_2    \n",
    "(5 marks)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['LIMIT_BAL', 'SEX', 'EDUCATION', 'MARRIAGE', 'AGE', 'PAY_1', 'PAY_2',\n",
      "       'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6', 'BILL_AMT1', 'BILL_AMT2',\n",
      "       'BILL_AMT3', 'BILL_AMT4', 'BILL_AMT5', 'BILL_AMT6', 'PAY_AMT1',\n",
      "       'PAY_AMT2', 'PAY_AMT3', 'PAY_AMT4', 'PAY_AMT5', 'PAY_AMT6',\n",
      "       'payment_default', 'LIMIT_BAL_2', 'PAY_1_2', 'PAY_2_2', 'PAY_3_2',\n",
      "       'PAY_4_2', 'PAY_5_2', 'PAY_6_2', 'BILL_AMT1_2', 'BILL_AMT2_2',\n",
      "       'BILL_AMT3_2', 'BILL_AMT4_2', 'BILL_AMT5_2', 'BILL_AMT6_2'],\n",
      "      dtype='object')\n",
      "(30000, 37)\n"
     ]
    }
   ],
   "source": [
    "df['LIMIT_BAL_2']=df['LIMIT_BAL']**2\n",
    "df['PAY_1_2']=np.power((df['PAY_1']),2)\n",
    "df['PAY_2_2']=np.power((df['PAY_2']),2)\n",
    "df['PAY_3_2']=np.power((df['PAY_3']),2)\n",
    "df['PAY_4_2']=np.power((df['PAY_4']),2)\n",
    "df['PAY_5_2']=np.power((df['PAY_5']),2)\n",
    "df['PAY_6_2']=np.power((df['PAY_6']),2)\n",
    "df['BILL_AMT1_2']=np.power((df['BILL_AMT1']),2)\n",
    "df['BILL_AMT2_2']=np.power((df['BILL_AMT2']),2)\n",
    "df['BILL_AMT3_2']=np.power((df['BILL_AMT3']),2)\n",
    "df['BILL_AMT4_2']=np.power((df['BILL_AMT4']),2)\n",
    "df['BILL_AMT5_2']=np.power((df['BILL_AMT5']),2)\n",
    "df['BILL_AMT6_2']=np.power((df['BILL_AMT6']),2)\n",
    "print(df.columns)\n",
    "print(df.shape)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr style=\"width:35%;margin-left:0;\"> \n",
    "\n",
    "**Problem 2.** Cleaning data and dealing with categorical features - Total Marks: 20\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Q1**. Print `value_counts()` of 'SEX' column and create dummy variables 'SEX_MALE' and 'SEX_FEMALE' using `get_dummies()`.  \n",
    "*Carefully* explain how the new variables are constructed. (2.5 marks)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2    18112\n",
      "1    11888\n",
      "Name: SEX, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(df.SEX.value_counts())\n",
    "df = pd.get_dummies(df, columns = ['SEX'])\n",
    "df.rename(columns = {1: 'SEX_MALE', 2: 'SEX_FEMALE'}, inplace = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Q2**. Print `value_counts()` of 'MARRIAGE' column, provide its definition, and *carefully* comment on what you notice in relation to the definition of this variable. (2.5 marks) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2    15964\n",
      "1    13659\n",
      "3      323\n",
      "0       54\n",
      "Name: MARRIAGE, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(df.MARRIAGE.value_counts())\n",
    "# df.info\n",
    "# According to the type, it should be be of 3 categories either 'yes' or 'no' or 'other' as 1,2,3)\n",
    "#No assigned attribute to varioabe \"0\" and is not defined among the three categories. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Q3**. Use `get_dummies()` on 'MARRIAGE' and create dummy variables 'MARRIAGE_MARRIED', 'MARRIAGE_SINGLE', 'MARRIAGE_OTHER'.   \n",
    "Make sure you allocate all values of 'MARRIAGE' across the 3 newly created features appropriately.   \n",
    "Explain how you created the new features and what decisions you had to make. (7.5 marks)   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>LIMIT_BAL</th>\n",
       "      <th>EDUCATION</th>\n",
       "      <th>AGE</th>\n",
       "      <th>PAY_1</th>\n",
       "      <th>PAY_2</th>\n",
       "      <th>PAY_3</th>\n",
       "      <th>PAY_4</th>\n",
       "      <th>PAY_5</th>\n",
       "      <th>PAY_6</th>\n",
       "      <th>BILL_AMT1</th>\n",
       "      <th>...</th>\n",
       "      <th>PAY_AMT3</th>\n",
       "      <th>PAY_AMT4</th>\n",
       "      <th>PAY_AMT5</th>\n",
       "      <th>PAY_AMT6</th>\n",
       "      <th>payment_default</th>\n",
       "      <th>SEX_1</th>\n",
       "      <th>SEX_2</th>\n",
       "      <th>MARRIAGE_1</th>\n",
       "      <th>MARRIAGE_2</th>\n",
       "      <th>MARRIAGE_3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>20000</td>\n",
       "      <td>2</td>\n",
       "      <td>24</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "      <td>3913</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>120000</td>\n",
       "      <td>2</td>\n",
       "      <td>26</td>\n",
       "      <td>-1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2682</td>\n",
       "      <td>...</td>\n",
       "      <td>1000</td>\n",
       "      <td>1000</td>\n",
       "      <td>0</td>\n",
       "      <td>2000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>90000</td>\n",
       "      <td>2</td>\n",
       "      <td>34</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>29239</td>\n",
       "      <td>...</td>\n",
       "      <td>1000</td>\n",
       "      <td>1000</td>\n",
       "      <td>1000</td>\n",
       "      <td>5000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>50000</td>\n",
       "      <td>2</td>\n",
       "      <td>37</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>46990</td>\n",
       "      <td>...</td>\n",
       "      <td>1200</td>\n",
       "      <td>1100</td>\n",
       "      <td>1069</td>\n",
       "      <td>1000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>50000</td>\n",
       "      <td>2</td>\n",
       "      <td>57</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8617</td>\n",
       "      <td>...</td>\n",
       "      <td>10000</td>\n",
       "      <td>9000</td>\n",
       "      <td>689</td>\n",
       "      <td>679</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29995</th>\n",
       "      <td>220000</td>\n",
       "      <td>3</td>\n",
       "      <td>39</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>188948</td>\n",
       "      <td>...</td>\n",
       "      <td>5003</td>\n",
       "      <td>3047</td>\n",
       "      <td>5000</td>\n",
       "      <td>1000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29996</th>\n",
       "      <td>150000</td>\n",
       "      <td>3</td>\n",
       "      <td>43</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1683</td>\n",
       "      <td>...</td>\n",
       "      <td>8998</td>\n",
       "      <td>129</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29997</th>\n",
       "      <td>30000</td>\n",
       "      <td>2</td>\n",
       "      <td>37</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3565</td>\n",
       "      <td>...</td>\n",
       "      <td>22000</td>\n",
       "      <td>4200</td>\n",
       "      <td>2000</td>\n",
       "      <td>3100</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29998</th>\n",
       "      <td>80000</td>\n",
       "      <td>3</td>\n",
       "      <td>41</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1645</td>\n",
       "      <td>...</td>\n",
       "      <td>1178</td>\n",
       "      <td>1926</td>\n",
       "      <td>52964</td>\n",
       "      <td>1804</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29999</th>\n",
       "      <td>50000</td>\n",
       "      <td>2</td>\n",
       "      <td>46</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>47929</td>\n",
       "      <td>...</td>\n",
       "      <td>1430</td>\n",
       "      <td>1000</td>\n",
       "      <td>1000</td>\n",
       "      <td>1000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>30000 rows × 27 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       LIMIT_BAL  EDUCATION  AGE  PAY_1  PAY_2  PAY_3  PAY_4  PAY_5  PAY_6  \\\n",
       "0          20000          2   24      2      2     -1     -1     -2     -2   \n",
       "1         120000          2   26     -1      2      0      0      0      2   \n",
       "2          90000          2   34      0      0      0      0      0      0   \n",
       "3          50000          2   37      0      0      0      0      0      0   \n",
       "4          50000          2   57     -1      0     -1      0      0      0   \n",
       "...          ...        ...  ...    ...    ...    ...    ...    ...    ...   \n",
       "29995     220000          3   39      0      0      0      0      0      0   \n",
       "29996     150000          3   43     -1     -1     -1     -1      0      0   \n",
       "29997      30000          2   37      4      3      2     -1      0      0   \n",
       "29998      80000          3   41      1     -1      0      0      0     -1   \n",
       "29999      50000          2   46      0      0      0      0      0      0   \n",
       "\n",
       "       BILL_AMT1  ...  PAY_AMT3  PAY_AMT4  PAY_AMT5  PAY_AMT6  \\\n",
       "0           3913  ...         0         0         0         0   \n",
       "1           2682  ...      1000      1000         0      2000   \n",
       "2          29239  ...      1000      1000      1000      5000   \n",
       "3          46990  ...      1200      1100      1069      1000   \n",
       "4           8617  ...     10000      9000       689       679   \n",
       "...          ...  ...       ...       ...       ...       ...   \n",
       "29995     188948  ...      5003      3047      5000      1000   \n",
       "29996       1683  ...      8998       129         0         0   \n",
       "29997       3565  ...     22000      4200      2000      3100   \n",
       "29998      -1645  ...      1178      1926     52964      1804   \n",
       "29999      47929  ...      1430      1000      1000      1000   \n",
       "\n",
       "       payment_default  SEX_1  SEX_2  MARRIAGE_1  MARRIAGE_2  MARRIAGE_3  \n",
       "0                    1      0      1           1           0           0  \n",
       "1                    1      0      1           0           1           0  \n",
       "2                    0      0      1           0           1           0  \n",
       "3                    0      0      1           1           0           0  \n",
       "4                    0      1      0           1           0           0  \n",
       "...                ...    ...    ...         ...         ...         ...  \n",
       "29995                0      1      0           1           0           0  \n",
       "29996                0      1      0           0           1           0  \n",
       "29997                1      1      0           0           1           0  \n",
       "29998                1      1      0           1           0           0  \n",
       "29999                1      1      0           1           0           0  \n",
       "\n",
       "[30000 rows x 27 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['MARRIAGE'] = df['MARRIAGE'].replace(0, 3)\n",
    "df = pd.get_dummies(df, columns = ['MARRIAGE'])\n",
    "df.rename(columns={1: 'MARRIAGE_MARRIED', 2: 'MARRIAGE_SINGLE', 3: 'MARRIAGE_OTHER'})\n",
    "# 0 value cells been changed to 3 to address it correctly.\n",
    "# currently using 3 categories"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Q4**. In the column 'EDUCATION', convert values {0, 4, 5, 6} into the value 4. (7.5 marks)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# print(df.EDUCATION.value_counts())\n",
    "df.loc[df['EDUCATION'].isin([0, 4, 5, 6]), 'EDUCATION'] = 4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr style=\"width:35%;margin-left:0;\"> \n",
    "\n",
    "**Problem 3** Preparing X and y arrays - Total Marks: 7.5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Q1**. Delete the columns 'SEX' and 'MARRIAGE' (2.5 marks)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['LIMIT_BAL', 'EDUCATION', 'AGE', 'PAY_1', 'PAY_2', 'PAY_3', 'PAY_4',\n",
       "       'PAY_5', 'PAY_6', 'BILL_AMT1', 'BILL_AMT2', 'BILL_AMT3', 'BILL_AMT4',\n",
       "       'BILL_AMT5', 'BILL_AMT6', 'PAY_AMT1', 'PAY_AMT2', 'PAY_AMT3',\n",
       "       'PAY_AMT4', 'PAY_AMT5', 'PAY_AMT6', 'payment_default', 'LIMIT_BAL_2',\n",
       "       'PAY_1_2', 'PAY_2_2', 'PAY_3_2', 'PAY_4_2', 'PAY_5_2', 'PAY_6_2',\n",
       "       'BILL_AMT1_2', 'BILL_AMT2_2', 'BILL_AMT3_2', 'BILL_AMT4_2',\n",
       "       'BILL_AMT5_2', 'BILL_AMT6_2', 'SEX_1', 'SEX_2', 'MARRIAGE_1',\n",
       "       'MARRIAGE_2', 'MARRIAGE_3'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# df.columns\n",
    "#already dropped on the above code"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Q2**. Create `y` from 5000 observations (using observations 5000 - 9999) of 'payment_default' column from df. Similarly, create `X`  from 5000 corresponding observatations of all the remaining features in `df` (2.5 marks)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "y = pd.DataFrame(df['payment_default'])[5000:9999].values.ravel()\n",
    "X = df.drop(['payment_default'], axis = 1)[5000:9999]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Q3**. Use an appropriate scikit-learn library we learned in class to create `y_train`, `y_test`, `X_train` and `X_test` by splitting the data into 75% train and 25% test datasets.  \n",
    "Set random_state to 7 and stratify subsamples so that train and test datasets have roughly equal proportions of the target's class labels. (2.5 marks) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 7, stratify = y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr style=\"width:35%;margin-left:0;\"> \n",
    "\n",
    "**Problem 4**. Optimize hyperparameters using grid search and SVC - Total Marks: 40\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Q1**. Use `make_pipeline` to create a pipeline called `pipe_svc` consisting of:   \n",
    "- StandardScaler    \n",
    "- PCA (set random_state to 2)  \n",
    "- SVC (set random_state to 2)  \n",
    "   \n",
    "(10 marks)   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.pipeline import make_pipeline\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.decomposition import PCA\n",
    "\n",
    "\n",
    "pipe_svc = make_pipeline(StandardScaler(),\n",
    "                         PCA(random_state = 2),\n",
    "                         SVC(random_state = 2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Q2**. Use `GridSearchCV` to create `gs` object, fit the model and tune the following hyperparameters     \n",
    "- SVC $C$ parameter - grid search over the following values [0.05, 0.5, 1, 5]    \n",
    "- SVC kernel - grid search over 3 alternatives: linear, sigmoid, and rbf  \n",
    "- Number of PCA components - grid search over the following 3 values [2, 5, 10]        \n",
    "- When implementing `GridSearchCV` set the following options (leaving everying else to their default values)    \n",
    "    - accuracy for scoring   \n",
    "    - `refit` to True   \n",
    "    - number of cross-validation folds to 10   \n",
    "    - `n_jobs=-1`     \n",
    "     \n",
    "(20 marks)   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "val = [2,5,10]\n",
    "param_range = [0.05, 0.5, 1, 5]\n",
    "param_grid = [{'svc__C': param_range,\n",
    "               'svc__kernel': ['linear'],\n",
    "              'pca__n_components':val},\n",
    "              {'svc__C': param_range,  \n",
    "               'svc__kernel': ['rbf'], \n",
    "              'pca__n_components': val},\n",
    "             {'svc__C': param_range,  \n",
    "               'svc__kernel': ['sigmoid'], \n",
    "              'pca__n_components': val}]\n",
    "gs = GridSearchCV(estimator = pipe_svc,          \n",
    "                  param_grid = param_grid, \n",
    "                  scoring = 'accuracy', \n",
    "                  refit = True, \n",
    "                  cv = 10, \n",
    "                  n_jobs = -1)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Q3**. Using the best model optimised by grid-search print the following   \n",
    "- cross-validation `best_score_`  \n",
    "- accuracy for the training set  \n",
    "- accuracy for the test set    \n",
    "\n",
    "(10 marks)     \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Best score is: 0.7956777183600712\n",
      "The Test accuracy is: 0.8048\n",
      "The Train accuracy is: 0.7991464390504135\n"
     ]
    }
   ],
   "source": [
    "gs = gs.fit(X_train, y_train)\n",
    "print('The Best score is:', gs.best_score_)\n",
    "print('The Test accuracy is:', gs.score(X_test, y_test))\n",
    "print('The Train accuracy is:', gs.score(X_train, y_train))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr style=\"width:35%;margin-left:0;\"> \n",
    "\n",
    "**Problem 5.** Confusion Matrix - Total marks: 25   "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Q1**. Use the best fitted model of `gs` to print the confusion matrix. (5 marks)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[929  33]\n",
      " [211  77]]\n"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "gs.fit(X_train, y_train)\n",
    "y_pred = gs.predict(X_test)\n",
    "confmat = confusion_matrix(y_true=y_test, y_pred=y_pred)\n",
    "print(confmat)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Q2**. Plot the confusion matrix, and on its basis compute the True Positive Rate, False Positive Rate and Precision. (10 marks)   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[929  33]\n",
      " [211  77]]\n",
      "77 211 33 929\n",
      "FPR 0.7326388888888888\n",
      "PRE 0.8149122807017544\n",
      "TPR 0.9656964656964657\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'True label')"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 180x180 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import precision_score, recall_score, f1_score, accuracy_score\n",
    "\n",
    "gs.fit(X_train, y_train)\n",
    "y_pred = gs.predict(X_test)\n",
    "confmat = confusion_matrix(y_true=y_test, y_pred=y_pred)\n",
    "print(confmat)\n",
    "# print(y_test.shape)\n",
    "\n",
    "\n",
    "tp, fn, fp, tn = confusion_matrix(y_true=y_test, y_pred=y_pred, labels=[0, 1]).ravel()\n",
    "print(tn, fp, fn, tp)\n",
    "FPR= fp/(fp+tn)\n",
    "PRE = tp/(tp+fp)\n",
    "TPR = tp/(tp+fn)\n",
    "\n",
    "print(\"FPR\", FPR)\n",
    "print(\"PRE\", PRE)\n",
    "print(\"TPR\",TPR)\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(2.5, 2.5))\n",
    "ax.matshow(confmat, cmap=plt.cm.Blues, alpha=0.3)\n",
    "for i in range(confmat.shape[0]):\n",
    "    for j in range(confmat.shape[1]):\n",
    "        ax.text(x=j, y=i, s=confmat[i, j], va='center', ha='center')\n",
    "\n",
    "plt.xlabel('Predicted label')\n",
    "plt.ylabel('True label')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Q3**. Looking at the confusion matrix and the three quantities that you computed what is the greatest source of risk to the credit card company should it rely on the predictions constructed by our model optimised for `accuracy`?   \n",
    "Explain your answer in detail. (10 marks)   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.804\n"
     ]
    }
   ],
   "source": [
    "print(f'Accuracy: {accuracy_score(y_true=y_test, y_pred=y_pred):.3f}')\n",
    "# If seen, Accuracy score shows 0.804 and True positives are 927. Keeping in mind False positives are 210 customers. The prediction shows there are 210 false positives which risks the position of the\n",
    "# company in the market. Higher amount of false judgment can risk the liquidity and raise eyebrows on identifying if there's any fraudlent involved.\n",
    "# FPR is 72% which shows high occurance of error and dusruption. Company should take this prediction seriously and try to find the solution to ommit the false and flaw in their system."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  },
  "toc-autonumbering": false,
  "toc-showmarkdowntxt": false
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
